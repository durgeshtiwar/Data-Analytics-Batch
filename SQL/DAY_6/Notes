create database key_prem;
use key_prem;
create table ineuron(
course_id int not null,
course_name varchar(30),
course_status varchar(30),
number_of_enro int default null,
primary key(course_id)
);
insert into ineuron values(1, 'FSDA', 'Active', 20);
insert into ineuron values(2, 'FSDA', 'Active', 20);
insert into ineuron values(3, 'FSDA', 'Active', 20);
insert into ineuron values(4, 'FSDA', 'Active', 20);
select * from ineuron;

create table studets_ineuron(
student_id int not null,
course_name varchar(30),
student_mail varchar(30),
student_status varchar(30),
course_id1 int, 
foreign key(course_id1) references ineuron(course_id) 
);
insert into studets_ineuron values(101, 'fsda', 'stud@gmail.com', 'active', 1);
insert into studets_ineuron values(102, 'fsda', 'stud@gmail.com', 'active', 1);
insert into studets_ineuron values(103, 'fsda', 'stud@gmail.com', 'active', 3);
insert into studets_ineuron values(101, 'fsda', 'stud@gmail.com', 'active', 2);
select * from studets_ineuron;

create table payment(
course_name varchar(30),
course_id int, 
course_live_status varchar(30),
coures_launch_date varchar(30),
foreign key(course_id) references ineuron(course_id)
);
insert into payment values('fsda',01,'not-active','7th aug');
insert into payment values('fsda',01,'not-active','7th aug');
insert into payment values('fsda',01,'not-active','7th aug');
select * from payment;

create table class(
course_id int,
class_name varchar(30),
class_topic varchar(30),
class_duration int, 
primary key(course_id),
foreign key(course_id) references ineuron(course_id)
);
alter table ineuron drop primary key; 
alter table class drop primary key;
drop table ineuron;
drop table class;

create table test(
id int not null,
name varchar(30),
email_id varchar(30),
mobile_no varchar(10),
address varchar(60)
);
alter table test add primary key(id);
alter table test drop primary key;
alter table test add primary key(id, email_id);

create table parent(
id int not null,
primary key(id)
);

create table child(
id int,
parent_id int,
foreign key(parent_id) references parent(id)
);

insert into parent values(1)
select * from parent 
insert into child values(1,1)
select * from child
insert into child values(2,2)
delete from parent where id =1
delete from child where id =1

drop table child


create table child (
id int ,
parent_id int ,
foreign key (parent_id) references parent(id) on delete cascade )

insert into child values(1,1),(1,2),(3,2),(2,2)

select * from child

select * from parent

delete from parent where id  = 1

update parent set id = 3 where id = 2

drop table child

create table child (
id int ,
parent_id int ,
foreign key (parent_id) references parent(id) on update cascade )

insert into child values(1,1),(1,2),(3,2),(2,2)

select * from child ; 
select * from parent;

update parent set id = 3 where id = 2